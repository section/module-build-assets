# run a single nginx process
worker_processes 1;

# set open fd limit to 30000
# default 2000
worker_rlimit_nofile 30000;

# allow nginx to run as non-privileged process
pid /var/openresty/nginx.pid;

events {
    # no of clients to serve at a time
    # max no of clients = worker_connections * worker_process
    worker_connections 10000;
    # allow multipe connections at the same time
    multi_accept on;
}

# used by the go handler to set the debug level
include /var/openresty/error_log.conf;

http {

    # Don't limit, allow the edge to protect this
    # set to 100m
    client_max_body_size 0;

    # relocate temp paths to run as limited-user
    client_body_temp_path /var/openresty/client_body_temp;
    fastcgi_temp_path /var/openresty/fastcgi_temp;
    proxy_temp_path /var/openresty/proxy_temp;
    scgi_temp_path /var/openresty/scgi_temp;
    uwsgi_temp_path /var/openresty/uwsgi_temp;

    # Limiting the number of light threads that can be ran at a time
    lua_max_pending_timers 1024;
    lua_max_running_timers 256;

    ##
    # Basic Settings
    ##

    # in accordance with the module contract
    # default is 1.0
    proxy_http_version 1.1;
    # copies data from one fd to another
    # does not copy to buffer
    sendfile on;
    # optimises amount of data sent : MTU - IP Header size
    tcp_nopush on;
    # used in this case when transitioning to keep alive state, for unbuffered proxying, websockets proxying
    tcp_nodelay on;
    # how long a TCP connection is kept open
    keepalive_timeout 65;
    # To quickly process static sets of data such as server names, map directiveâ€™s values, MIME types, names of request header strings
    # default 1024
    # http://nginx.org/en/docs/hash.html
    types_hash_max_size 2048;

    # use provided mime.types file
    include /etc/openresty/mime.types;
    # use the default type of application/octet-stream if no content-type is present in response
    default_type application/octet-stream;

    ##
    # Virtual Host Configs
    ##

    # Section log format for access logs
    # time : timestamp
    # time_taken_s : time elapsed between the first bytes were read from the client and the log write after the last bytes were sent to the client, in seconds
    # request : url of the request
    # status : reponse status code
    # bytes : the number of bytes sent to a client
    # response_body_bytes : the number of bytes in the response body
    # content_type : content type of the response
    # hostname : contains the content of the HTTP "Host" header field,
    # referrer : contains the content of the HTTP "Referrer" header field, if it was present in the request
    # useragent : contains the content of the HTTP "User-agent" header field
    # http_x_forwarded_proto : contains the content of the HTTP "X-Forwareded-Proto" header field. Used to optionally upgrade connection to HTTPS when Section egress connects to the origin web server.
    # section_io_tag : custom field used to log values to make them available in Kibana.
    # section_io_id : unique id used for the request/response.

    log_format section_json escape=json '{'
        '"time":"$time_iso8601",'
        '"time_taken_s":"$request_time",'
        '"request":"$request",'
        '"status":"$status",'
        '"bytes":"$bytes_sent",'
        '"response_body_bytes":"$body_bytes_sent",'
        '"content_type":"$sent_http_content_type",'
        '"hostname":"$http_host",'
        '"referrer":"$http_referer",'
        '"useragent":"$http_user_agent",'
        '"http_x_forwarded_proto":"$http_x_forwarded_proto",'
        '"upstream_status":"$upstream_status",'
        '"section_io_tag":"$section_io_tag",'
        '"section_io_id":"$http_section_io_id"}';

    access_log /var/log/nginx/access.log section_json;

    # stop sending default nginx Server header
    server_tokens off;

    # add proxy buffers to resolve upstream server header too big error
    proxy_buffer_size   128k;
    proxy_buffers  4 256k;
    proxy_busy_buffers_size   256k;

    # set the proxy timeouts so that nginx always fails before ingress, showing the friendly error page
    proxy_connect_timeout 60s;
    proxy_send_timeout  120s;
    proxy_read_timeout  120s;

    # required resolver conf if nginx makes connection to any domain except `next-hop` as defined by module contract
    # when run in a containr nginx does not use the host resolver file i.e. /etc/resolver.conf.
    include /var/openresty/resolver.conf;

    # limit access
    root /usr/share/nginx/www;

    # calculate the Connection request header value to support websockets
    map $http_upgrade $proxy_set_header_connection {
        # support Websockets
        websocket Upgrade;
        # clear Connection request header by default for use with upstream keepalive.
        default '';
    }

    # nginx gets rid of undersocres in headers
    underscores_in_headers on;

    # enable keepalive for the upstream which is next-hop as defined by the module contract
    upstream next_hop_upstream {
        server next-hop:80;
        keepalive 1;
    }

    server {
        listen 80;

        # catch all location block
        location / {

            # set the section_io_tag header to not log it's value in Kibana
            set $section_io_tag "";

            proxy_set_header X-Forwarded-For $http_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            proxy_set_header Host $host;
            # by default proxy pass all requests upstream
            proxy_pass http://next_hop_upstream;
        }

        # example of a custom location block
        # in this example it is used to proxy pass request upstream
        # a similar location block can be used to make requests to an endpoint
        # to do that once can replace the proxy pass directive by content_by_lua_file /usr/local/openresty/lualib/section/api_content.lua; and use api_content.lua to populate the request object and make an http request to the desired endpoint
        location ~ ^/.well-known/section-io/examplemodule/pass-request(?<url>.+)$ {

            set $section_io_tag "";

            proxy_set_header X-Forwarded-For $http_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            proxy_set_header Host $host;

            rewrite ^/.well-known/section-io/examplemodule/pass-request/(.*)$ /$1 break;
            proxy_pass http://next_hop_upstream;
        }
    }
}
